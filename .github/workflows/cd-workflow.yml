# name: CD with Gradle and Docker for Producer and Consumer

# on:
#   push:
#     branches:
#       - 'main'
#       - 'develop'
#   pull_request:
#     branches:
#       - 'main'
#       - 'develop'

# permissions:
#   contents: read

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v4

#       - name: ☕️ Set up JDK 17
#         uses: actions/setup-java@v3
#         with:
#           java-version: '17'
#           distribution: 'temurin'

#       - name: Grant execute permission for Gradlew
#         run: chmod +x ./gradlew

#       - name: 🐘 Build Producer with Gradle
#         run: ./gradlew :producer:clean :producer:build -x test --stacktrace

#       - name: 🐘 Build Consumer with Gradle
#         run: ./gradlew :consumer:clean :consumer:build -x test --stacktrace

#       - name: 💣 Build and Push Docker Images
#         run: |
#           docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#           docker build -f ./producer/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/roomie-producer:latest ./producer
#           docker build -f ./consumer/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/roomie-consumer:latest ./consumer
#           docker push ${{ secrets.DOCKER_USERNAME }}/roomie-producer:latest
#           docker push ${{ secrets.DOCKER_USERNAME }}/roomie-consumer:latest

#       - name: 🚀 Deploy without Docker Compose
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_KEY }}
#           port: ${{ secrets.EC2_PORT }}
#           script: |
#             echo "Uploading environment variables to EC2"

#             # .pem 키를 파일로 저장
#             echo "${{ secrets.EC2_KEY }}" > /tmp/Roomie.pem
#             chmod 600 /tmp/Roomie.pem

#             # EC2에 접속하여 작업 수행
#             ssh -o StrictHostKeyChecking=no -i /tmp/Roomie.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
#               echo "Writing environment variables to .env"
#               echo "SPRING_DATASOURCE_DRIVER_CLASS_NAME=${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}" > .env
#               echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
#               echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
#               echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> .env
#               echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
#               echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env
#               echo "NAVER_LOCATION_SEARCH_URL=${{ secrets.NAVER_LOCATION_SEARCH_URL }}" >> .env
#               echo "AWS_EC2_REDIS_HOST=${{ secrets.AWS_EC2_REDIS_HOST }}" >> .env
#               echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
  
#               echo "Stopping and removing existing containers"
#               sudo docker stop producer || true
#               sudo docker rm producer || true
#               sudo docker stop consumer || true
#               sudo docker rm consumer || true
            
#             echo "Pulling the latest Producer image"
#             sudo docker pull ${{ secrets.DOCKER_USERNAME }}/roomie-producer:latest
  
#             echo "Pulling the latest Consumer image"
#             sudo docker pull ${{ secrets.DOCKER_USERNAME }}/roomie-consumer:latest

#               echo "Running Producer container"
#               sudo docker run -d --name producer -p 8080:8080 \
#                 --env-file .env \
#                 ${{ secrets.DOCKER_USERNAME }}/roomie-producer:latest

#               echo "Running Consumer container"
#               sudo docker run -d --name consumer -p 8081:8081 \
#                 --env-file .env \
#                 ${{ secrets.DOCKER_USERNAME }}/roomie-consumer:latest

#               echo "Cleaning up unused Docker images"
#               sudo docker image prune -f
#             EOF